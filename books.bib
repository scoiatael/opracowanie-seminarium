@book{Appel,
 author = {Appel, Andrew W.},
 title = {Compiling with Continuations},
 year = {2007},
 isbn = {052103311X},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA},
}
@book{Dragonbook,
 author = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
 title = {Compilers: Principles, Techniques, and Tools},
 year = {1986},
 isbn = {0-201-10088-6},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}  
@booklet{Leroy16,
 author = {Xavier Leroy and Damien Doligez and Alain Frisch and Jacques Garrigue and Didier Rémy and Jérôme Vouillon},
 title = {The OCaml system release 4.03, Documentation and user’s manual},
 year = {2016}
}  
@article{Lieberman83,
 author = {Lieberman, Henry and Hewitt, Carl},
 title = {A Real-time Garbage Collector Based on the Lifetimes of Objects},
 journal = {Commun. ACM},
 issue_date = {June 1983},
 volume = {26},
 number = {6},
 month = jun,
 year = {1983},
 issn = {0001-0782},
 pages = {419--429},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/358141.358147},
 doi = {10.1145/358141.358147},
 acmid = {358147},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {LISP, algorithms, languages, lisp, object-oriented programming, parallel processing, performance, real-time garbage collection, reference counting, virtual memory},
} 
@article{Shaw87,
 author = {Robert A. Shaw},
 title = {Improving garbage collector performance in virtual memory.},
 year = {1987}
}  
@phdthesis{Ungar86,
    Author = {Ungar, David Michael},
    Title = {The Design and Evaluation of A High Performance Smalltalk System},
    School = {EECS Department, University of California, Berkeley},
    Year = {1986},
    Month = {Feb},
    URL = {http://www.eecs.berkeley.edu/Pubs/TechRpts/1986/5376.html},
    Number = {UCB/CSD-86-287},
    Abstract = {The Smalltalk-80 system makes it possible to write programs quickly by providing object-oriented programming, incremental compilation, run-time type checking, use-extensible data types and control structures, and an interactive graphical interface. However, the potential savings in programming effort have been curtailed by poor performance in widely available computers or high processor cost. Smalltalk-80 systems pose tough challenges for implementors: dynamic data typing, a high-level instruction set, frequent and expensive procedure calls, and object-oriented storage management. <p> The dissertation documents two results that run counter to conventional wisdom: that a reduced instruction set computer can offer excellent performance for a system with dynamic data typing such as Smalltalk-80, and that automatic storage reclamation need not be time-consuming.}
}